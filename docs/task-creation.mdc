---
description: 
globs: 
alwaysApply: false
---
# Task 생성 및 프로젝트 구조화 룰

## 개요
새로운 프로젝트나 주제를 시작할 때 체계적인 Task 기반 개발을 위한 룰입니다.

## Task 생성 프로세스

### 1. 프로젝트 분석 및 계획
- 사용자가 새로운 프로젝트나 기능을 요청하면 먼저 전체 범위를 파악
- 프로젝트를 논리적이고 순차적인 Task들로 세분화
- 각 Task는 독립적으로 완료 가능하면서도 전체 목표에 기여해야 함

### 2. 폴더 구조 생성
```
plan/
└── [주제명]/
    ├── tasks/
    │   ├── task01_[작업명].md
    │   ├── task02_[작업명].md
    │   └── ...
    └── project_progress.md
```

### 3. Task 파일 구조
각 Task 파일은 다음 구조를 따라야 합니다:

```markdown
# Task N: [작업명]

## 📋 체크리스트
- [ ] 세부 작업 1
- [ ] 세부 작업 2
- [ ] 세부 작업 3

## 📝 상세 내용
### 구현할 기능들
- 상세한 구현 방법
- 코드 예시
- 주요 고려사항

## 🛠️ 기술적 세부사항
- 사용할 기술 스택
- 파일 구조
- 의존성

## ✅ 완료 조건
- 명확한 완료 기준
- 검증 방법
```

### 4. 프로젝트 대시보드 생성
[project_progress.md](mdc:plan/[주제명]/project_progress.md) 파일에는 다음이 포함되어야 합니다:
- 전체 진행률 표시
- Task별 상태 및 진행률
- 프로젝트 타임라인
- 현재 집중해야 할 작업
- 프로젝트 로그 및 이슈 추적

### 5. Task 우선순위 설정
- **Phase 1**: 기초 설정 및 환경 구성
- **Phase 2**: 핵심 기능 구현
- **Phase 3**: 테스트, 문서화, 배포

## 명명 규칙

### 폴더명
- 영어 소문자와 하이픈 사용
- 예: `collect-game-news`, `user-management-system`

### Task 파일명
- `taskNN_[작업명].md` 형식
- 01부터 시작하는 순차 번호
- 예: `task01_project_setup.md`, `task02_database_design.md`

## 필수 체크사항
- [ ] 전체 프로젝트가 10개 이하의 Task로 적절히 분할됨
- [ ] 각 Task가 독립적으로 완료 가능함
- [ ] 모든 Task 파일이 동일한 구조를 따름
- [ ] 프로젝트 대시보드가 생성됨
- [ ] 의존성 관계가 명확히 정의됨
